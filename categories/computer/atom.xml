<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: computer | sourrabbit & linpx]]></title>
  <link href="http://colors4.us/blog/categories/computer/atom.xml" rel="self"/>
  <link href="http://colors4.us/"/>
  <updated>2012-01-25T04:20:07-05:00</updated>
  <id>http://colors4.us/</id>
  <author>
    <name><![CDATA[Dong Ping; Lin Pengxuan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[给octopress博客添加category列表]]></title>
    <link href="http://colors4.us/blog/2012/01/23/%E7%BB%99octopress%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0category-list/"/>
    <updated>2012-01-23T15:46:39-05:00</updated>
    <id>http://colors4.us/blog/2012/01/23/给octopress博客添加category-list</id>
    <content type="html"><![CDATA[<p>在前几篇博客我有提到过，我还不大会设置category
list。博客有这功能后，当然会更好浏览了。作为一项任务，必须攻克。于是大年初二，家里也没啥亲戚可逛，也没有太多电话短信去发，又上google搜去了，闲着也是闲着，挺好不是？</p>

<h4>设置</h4>

<p>当然还是先得去GitHub上去找前人做好的程序了，这里采用了<a href="https://gist.github.com/nistude">nistude</a>写的<a href="https://gist.github.com/1144723">gist:1144723</a>。
下面贴出的是我fork后修改的内容。<!--more-->
<div><script src='https://gist.github.com/1661725.js?file='></script>
<noscript><pre><code># place this file in your plugins directory and add the tag to your sidebar
#$ cat source/_includes/asides/categories.html 
#&lt;section&gt;
#  &lt;h1&gt;Categories&lt;/h1&gt;
#  &lt;ul id=&quot;categories&quot;&gt;
#    {% category_list %}
#  &lt;/ul&gt;
#&lt;/section&gt;

module Jekyll
  class CategoryListTag &lt; Liquid::Tag
    def render(context)
      html = &quot;&quot;
      categories = context.registers[:site].categories.keys
      categories.sort.each do |category|
        posts_in_category = context.registers[:site].categories[category].size
        html &lt;&lt; &quot;&lt;li class='category'&gt;&lt;a href='http://colors4.us/blog/categories/#{category}/'&gt;#{category} (#{posts_in_category})&lt;/a&gt;&lt;/li&gt;\n&quot;
      end
      html
    end
  end
end

Liquid::Template.register_tag('category_list', Jekyll::CategoryListTag)</code></pre></noscript></div>
</p>

<p>我解释一下用法。gist下载后放到<code>octopress/plugins/</code>下即可。然后建立<code>source/_includes/asides/categories.html</code>文件。内容如下：
<div><script src='https://gist.github.com/1667342.js?file='></script>
<noscript><pre><code>&lt;section&gt;
 &lt;h1&gt;Categories&lt;/h1&gt;
 &lt;ul id=&quot;categories&quot;&gt;
 {% category_list %}
 &lt;/ul&gt;
&lt;/section&gt;</code></pre></noscript></div>

然后我们在<code>_config.yml</code>中的<code>default_asides</code>条目中仿照同类，中括号内加入<code>asides/categories.html</code>就设置完了。这时<code>rake
generate</code>一下就出来了。</p>

<h4>需要注意的地方</h4>

<ul>
<li> 第一个gist文件17行设置的为category的绝对路径，可按需进行修改。</li>
<li> 不完善的地方是，它无法辨识带有大写字母的category或是中间有空格的单词串category。所以我昨天花了不少时间进入原来的博文，修改原有的category。既然我需要的基本功能可以使用，就不多折腾啦。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[利用邮件发表octopress博客]]></title>
    <link href="http://colors4.us/blog/2012/01/19/%E5%88%A9%E7%94%A8%E9%82%AE%E4%BB%B6%E5%8F%91%E8%A1%A8octopress%E5%8D%9A%E5%AE%A2/"/>
    <updated>2012-01-19T14:25:05-05:00</updated>
    <id>http://colors4.us/blog/2012/01/19/利用邮件发表octopress博客</id>
    <content type="html"><![CDATA[<p>看完这篇文章，我想大伙应该就可以实现通过email直接在octopress博客上进行发文。好处相当明显，你不可能永远带着你配置有octopress的电脑，只要手里有手机发邮件，就没有问题。真正做到<strong>anytime
anywhere</strong>.</p>

<p>写文章的初衷是，本<a href="http://colors4.us">网站</a>是<a href="http://twitter.com/linpx">我</a>和我<a href="http://twitter.com/sourrabbit">太太</a>
共同经营的博客。很多时候，她写好了文章，委托我发表时，苦于手中的工作windows电脑，发布相当不易。就开始设想有没有这么个功能，用email发布博客。答案是有。在和<a href="http://twitter.com/lucifr">@lucifr</a>交流后，发现<a href="http://twitter.com/masukomi">@masukomi</a>的方法很靠谱，可以使用，于是在不懂任何环境配置的情况下，瞎猫碰到死老鼠地运气和从<code>windows
95</code>就开始养成的反复安装，反复测试的精神的鼓励下，开始了摸索。</p>

<p>这篇文章适用于在自己域名上布置的octopuses博客，只需<code>rake
generate</code>就能在nginx上完全反映出内容的变化。如果是用github的朋友，还需多加上<code>rake deploy</code>和相应的<code>git
commit</code>。实际上从我之前所写的<a href="http://www.colors4.us/blog/2012/01/08/octopressbo-ke-cong-ling-kai-shi-i">Octopress博客从零开始</a>出发，到这篇文章为止，是可以做到零脑损建立octopress博客的。<!--more--></p>

<p>和原来发布方式有个不同的地方是，原来的博文地址都是中文拼音，这次更给力，地址用上中文了。另外，在windows远程登录ssh设置时看到的都是乱码，实际上不影响的，换台mac，就没有问题。</p>

<h4>jekymail配置</h4>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git://github.com/masukomi/JekyllMail.git /home/wwwroot/jekyllmail
</span><span class='line'>cd /home/wwwroot/jekyllmail
</span><span class='line'>rvm --default use 1.9.2
</span><span class='line'>apt-get install libxslt-dev libxml2-dev
</span><span class='line'>gem install nokogiri
</span><span class='line'>bundle install</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>进入jekyllmail文件夹，修改<code>_config.yml</code>,具体内容如下:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>blogs:
</span><span class='line'>- jekyll_repo: /home/wwwroot/blog     #这是我服务器上布置的octopress博客文件夹
</span><span class='line'>  source_dir: /home/wwwroot/blog/source   #这个文件夹下包括&lt;em>posts, &lt;/em>includes等
</span><span class='line'>  pop_server: pop.gmail.com
</span><span class='line'>  pop_user: xxx  #自定义的邮件接收地址(也就是xxx@gmail.com)
</span><span class='line'>  pop_password: yyy  #自定义的邮件登录密码
</span><span class='line'>  secret: 123!  #secret作用为让jekyllmail区别邮件是否为你想要发送的博文，自己设个吧
</span><span class='line'>  markup: markdown
</span><span class='line'>  site_url: http://colors4.us  #这里是我的网址
</span><span class='line'>  commit_after_save: true</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>邮件发送博文牵涉到两个邮件，发送的邮件和接收的邮件，jekyllmail会自己登录到接守的邮件上去检查是否有需要发送的博客。所以，我建议两个都用
gmail，确认设置中已经打开了pop3支持和utf-8发送。</p>

<p>是不是超级简单。我们现在可以测试一下是否有用。进入自己的gmail信箱给<code>xxx@gmail.com</code>发新邮件，邮件题目subject
如下，更详细的情况可参考程序作者<a href="http://twitter.com/masukomi">@masukomi</a>的<a href="https://github.com/masukomi/JekyllMail">git页面</a>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>这里是博文的题目中文亦可 || secret: 123! / author: linpx / categories: test ok /comments: true      #categories这里很特殊，各种目直接用空格隔开就行了，不要添逗号</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>邮件的内容直接拷入已经写好的markdown格式的文章即可。我建议书写格式去除<code>rich formatting</code>，改用<code>plain text</code> (这是
gmail内置的功能)。然后点击发送。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>jekyllmail folder </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ruby jekyllmail.rb</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>如果你能够在<code>/home/wwwroot/blog/source/_posts</code>中看到你刚才发过去的邮件，那么你的jekymail配置就是成功了。(这
里我首次测试是不成功的，百思不得其解，后来发现发的测试邮件在第一时间被我另一个设好crontab的服务器给接走鸟。-_-!!!)</p>

<h4>ubuntu下cron设置</h4>

<p>很明显，要让博文自动发送，必须有自动机制，程序作者程序作者<a href="http://twitter.com/masukomi">@masukomi</a>
也建议用cron。cron是linux下的定时器，定时运行程序。我在这里的设置相当乱，因为我对cron不熟悉，能用的原因是我一个一个试出来的，笨方法，大家别学。</p>

<ul>
<li>cron在运行的时候，是不会采用我们已经有的环境的。所以很多情况下，我们直接运行ruby
xxx.rb可以，但是在cron下是不行的，因为没有定义rubi环境。这个很重要，我花了3个小时才捉摸出来。</li>
<li> ubuntu下的cron设置很容易，在任何目录下运行<code>crontab -e</code>就行，存盘出来后应该就是已经放入到系统运行中去啦。</li>
<li> cron的语法必须要了解，大家可以看看这个<a href="https://help.ubuntu.com/community/CronHowto">页面</a>。</li>
</ul>


<p>我直接给出我可以用的设置，修改文件夹位置后，引用即可。输入<code>crontab
-e</code>,加到最后一行。内容中涉及到<code>gem</code>和<code>rvw</code>的地址，用<code>which gem</code>和<code>which rvm</code>来确定。
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>* * * * * /bin/echo "check if cron works" >> /home/wwwroot/1.log #此命令为每隔一分钟写入log文件，目的用于测试cron是否正常工作，确认后可直接删除。
</span><span class='line'>&lt;em>/5 * * * * cd /home/wwwroot/jekyllmail &amp;&amp; ./run_jekyllmail.sh #每隔5分钟登录检查邮箱，是否有博文，强迫症轻度患者建议改为每一分钟。
</span><span class='line'>* &lt;/em>/2 * * * cd /home/wwwroot/jekyllmail &amp;&amp; ./build_site.sh   #每隔2小时做一次rake generate</span></code></pre></td></tr></table></div></figure></notextile></div>
cron运行时时不带环境的，所以我们必须在<code>jekyllmail</code>下的两个文件<code>run_jekyllmail.sh</code>和<code>build_site.sh</code>定义环境。分别设定如下：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>!/bin/sh&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>[[ -s "$HOME/.rvm/scripts/rvm" ]] &amp;&amp; source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session &lt;em>as a function&lt;/em>
</span><span class='line'>export LANG=en_US.UTF-8
</span><span class='line'>export GEM_HOME=/usr/local/rvm/gems/ruby-1.9.2-p290
</span><span class='line'>export GEM_PATH=/usr/local/rvm/gems/ruby-1.9.2-p290:/usr/local/rvm/gems/ruby-1.9.2-p290@global
</span><span class='line'>export PATH=/usr/local/rvm/gems/ruby-1.9.2-p290/bin:/usr/local/rvm/gems/ruby-1.9.2-p290@global/bin:/usr/local/rvm/rubies/ruby-1.9.2-p290/bin:/usr/local/rvm/bin:$PATH #各机子环境有所不同，确认后代入&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>bundle exec ruby jekyllmail.rb</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>以及</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;h1>!/bin/sh&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;p>[[ -s "$HOME/.rvm/scripts/rvm" ]] &amp;&amp; source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session &lt;em>as a function&lt;/em>
</span><span class='line'>export LANG=en_US.UTF-8
</span><span class='line'>export GEM_HOME=/usr/local/rvm/gems/ruby-1.9.2-p290
</span><span class='line'>export GEM_PATH=/usr/local/rvm/gems/ruby-1.9.2-p290:/usr/local/rvm/gems/ruby-1.9.2-p290@global
</span><span class='line'>export PATH=/usr/local/rvm/gems/ruby-1.9.2-p290/bin:/usr/local/rvm/gems/ruby-1.9.2-p290@global/bin:/usr/local/rvm/rubies/ruby-1.9.2-p290/bin:/usr/local/rvm/bin:$PATH&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>cd /home/wwwroot/blog/ ＃你的octopuses文件夹目录
</span><span class='line'>bundle exec rake generate</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>通过cron定时进行<code>rake generate</code>必须补充一下，如果你的网页是放在github上，还需来个<code>rake deploy</code>。</p>

<h4>暂时结语</h4>

<p>上述方法不是最优的，其实我希望可以做到<a href="http://twitter.com/masukomi">@masukomi</a>所写的<a href="http://weblog.masukomi.org/2011/12/19/serving-octopress-from-a-self-hosted-git-repository/">Serving Octopress From a Self-hosted Git Repository</a>
（中文版可参考<a href="http://twitter.com/lucifr">@lucifr</a>所写博客<a href="http://lucifr.com/2011/12/21/octopress-on-server-and-portable-scheme/">服务器端 Octopress 搭建及移动方案</a>),文中的新博客文章放到特定文件夹后会主动触发<code>rake
generate</code>，在我看来，这远比用cron被动，反复rake来的即时和漂亮。我在做测试时，失败了，我会在以后继续跟进这个方向，有新的进展，肯定贴出。</p>

<p>如果对octopress这么多命令行没啥把握的话，不用怕。知难而上，做出来才爽啊。很多时候，在执行命令的时候，就直接给提示哪儿出错了。我们需要做得就是把错误信息google一下就行啦。因为出现的错误，肯定在别人处出现过，也肯定被解决过。而在寻找解决方法的过程，本身就是一种学习。另外，得有发散思维，一条程序线下来，出错了，有多种可能性，写下来，一个个设计试验来确定是否出错，排除。</p>

<p>博客整到现在还是很开心的。学到东西了，还能留下文字，如果帮助到大伙就更好了。这就是交流的好处吧。欢迎大伙在下面评论中留下各种问题，只要我知道的，会非常乐意互相沟通。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[windows下发布octopress博客的尝试]]></title>
    <link href="http://colors4.us/blog/2012/01/16/windowsxia-fa-bu-octopressbo-ke-de-chang-shi/"/>
    <updated>2012-01-16T03:00:00-05:00</updated>
    <id>http://colors4.us/blog/2012/01/16/windowsxia-fa-bu-octopressbo-ke-de-chang-shi</id>
    <content type="html"><![CDATA[<h5>多此一举</h5>

<p>以下经证明，属多此一举。在任何需要输入中文的情况下，只需在word下写好，拷贝入terminal cocoons即可，即使表现出来是乱码也勿挂，谨记各步骤即可。</p>

<!--more-->


<p>本篇文章适用于将octopress发布系统配置在服务器上的朋友。</p>

<p>有的时候需要发布博客，手头上只有windows电脑，还是借别人用的，异常绝望。因为我们通过windows以ssh方式登录上服务器后，发现输入中文时，出来全是乱码。rake generate不认怎么办。我想了个绕过去的方法，不用任何设置，只需要有<code>Dropbox</code>即可。</p>

<p>先解释我的方法。先用markdown写好博客，notepad下以UTF-8格式存好，放入Dropbox的<code>Public</code>文件夹，这样我们会得到一个链接，拷贝链接；在服务器端下，先设立新文档，命名新文档(建议按英文名命名，中文不识别的缘故),然后wget 拷好的链接，用cat命令将取回的博客添加到新文档后面，以保存完整的ymal的metadata。看看如下的代码就明白啦。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>服务器端 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd octopress
</span><span class='line'>wget http://dl.dropbox.com/u/389XXXX/1.txt   #your markdown file address
</span><span class='line'>rake new_post[“your new blog English name”]
</span><span class='line'>cat 1.txt >> source/_posts/2012-01-16-your-new-blog-english-name   #your file to edit
</span><span class='line'>rake generate</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress博客从零开始 III]]></title>
    <link href="http://colors4.us/blog/2012/01/08/octopressbo-ke-cong-ling-kai-shi-iii/"/>
    <updated>2012-01-08T08:22:00-05:00</updated>
    <id>http://colors4.us/blog/2012/01/08/octopressbo-ke-cong-ling-kai-shi-iii</id>
    <content type="html"><![CDATA[<p>其实现在已经可以开博了，不过如果进行一些个性化博客格式的调整，也就会让你自己的页面出彩些，对我来说，就是有些小爽了。<!--more--></p>

<h4>博客标题字体</h4>

<p>进入octopuses下的目录，修改文件<code>/source/_includes/custom/head.html</code>。从<a href="">Google webfonts</a>http://google.com/webfonts)往里头添加自己喜欢的字体。这是我的范例。<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>echo "&lt;link href='http://fonts.googleapis.com/css?family=Ruge+Boogie|Ruthie|Flavors|Rancho|Galdeano' rel='stylesheet' type='text/css'>" >> source/&lt;em>includes/custom/head.html
</span><span class='line'>vi sass/custom/&lt;/em>font.scss #这里修改主题，使用刚才添加的字体。我的如下
</span><span class='line'>$header-title-font-family: "Flavors", sans-serif;
</span><span class='line'>$header-subtitle-font-family: "Galdeano", sans-serif;
</span><span class='line'>vi _config.yml #这里修改博客标题的内容，我的如下
</span><span class='line'>url: http://colors4.us
</span><span class='line'>title: sourrabbit &amp; linpx
</span><span class='line'>subtitle: a blog for the colors in our life
</span><span class='line'>author: Dong Ping; Lin Pengxuan
</span><span class='line'>rake generate;rake deploy #看看效果</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>我的RSS图标呢？</h4>

<p>打开页面会发现RSS图标不见了，事实上一搜页面也能找到，就是图片无法显示，原因是我们更改了blog目录后，images文件夹没有相应变化。调整很容易，进入<code>config.rb</code>文件，修改如下：
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http_images_path = "/images"
</span><span class='line'>css_dir = "public/stylesheets"</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>颜色调整</h4>

<p>可以参考这篇<a href="http://blog.bigdinosaur.org/changing-octopresss-header/">文章</a>,我仅修改了标题的颜色等，修改<code>sass/custom/_colors.scss</code>如下:<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$$header-bg: #f2f2f2;
</span><span class='line'>$title-color: #000000;
</span><span class='line'>$subtitle-color: #000000;</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>如何continue to read</h4>

<p>有的时候文章太长了，不想把所有的都一次性放在网页上，这时候只需在想分割出来的段落后放置一个<code>&lt;!--more--&gt;</code>就可以了</p>

<h4>博客的sidebar</h4>

<p>sidebar可以在<code>_config.yml</code>中进行基本的设置，我的如下<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>twitter_user: linpx
</span><span class='line'>google_plus_one: true
</span><span class='line'>disqus_short_name: linpx
</span><span class='line'>post_asides: [ asides/recent_posts.html, asides/twitter.html] ＃这条是控制当我们看博客文章时呈现的sidebar形式，没有的话，走default</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>我们也可以修改footer，比如把<code>Powered by Octopress</code>改成<code>Proudly Powered by Octopress</code>,可在这个文件上修改<code>source/_includes/custom/footer.html</code></p>

<h4>header调整</h4>

<p>我对header调整没有任何概念，直接从这哥们的<a href="http://blog.bigdinosaur.org/changing-octopresss-header/">博客</a>上抄下来。下面的这段代码放入<code>sass/custom/_layout.scss</code>可以产生我博客上面的效果，请参考。
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$max-width: 1350px;
</span><span class='line'>body > header h1 {&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>  padding-left:2.5em;
</span><span class='line'>  text-align:right;
</span><span class='line'>  @media only screen and (min-width: 432px) {
</span><span class='line'>          text-align:left;
</span><span class='line'>  }
</span><span class='line'>  @media only screen and (min-width: 768px) {
</span><span class='line'>          padding-left:3em;
</span><span class='line'>  }
</span><span class='line'>  @media only screen and (min-width: 992px) {
</span><span class='line'>          padding-left:2em;
</span><span class='line'>  }
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>body > header h2 {&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>  padding-left:5.62em;
</span><span class='line'>  text-align:right;
</span><span class='line'>  @media only screen and (min-width: 432px) {
</span><span class='line'>          text-align:left;
</span><span class='line'>          padding-left:3.9em;
</span><span class='line'>  }
</span><span class='line'>  @media only screen and (min-width: 768px) {
</span><span class='line'>          padding-left:5em;
</span><span class='line'>  }
</span><span class='line'>  @media only screen and (min-width: 992px) {
</span><span class='line'>          padding-left:2.9em;
</span><span class='line'>  }
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>body > header h1:before {&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>  content:"";
</span><span class='line'>  position:absolute;
</span><span class='line'>  left:0em;
</span><span class='line'>  right:0;
</span><span class='line'>  top:1.5em;
</span><span class='line'>  height:110px;
</span><span class='line'>  width:110px;
</span><span class='line'>  overflow:hidden;
</span><span class='line'>  text-align:right;
</span><span class='line'>  background-image:url('http://farm8.staticflickr.com/7004/6658205771_3256ae9101_m.jpg');
</span><span class='line'>  background-repeat:no-repeat;
</span><span class='line'>  @media only screen and (min-width: 432px) {
</span><span class='line'>          top:.32em;
</span><span class='line'>  }
</span><span class='line'>  @media only screen and (min-width: 768px) {
</span><span class='line'>          left:.75em;
</span><span class='line'>  }
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>在sidebar上介绍关于这个博客的内容，比如<code>about me</code>等，可以进行如下操作<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd source/_includes/custom/asides
</span><span class='line'>vi about.html #必须用html来写，不会的话，可以到daring fireball上套用那儿的markdown转换html功能
</span><span class='line'>&lt;section>
</span><span class='line'>  &lt;h1>About us&lt;/h1>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>写你自己想要放入的介绍内容life.&lt;a href="http://www.colors4.us/about-us/index.html">...&lt;/a>&lt;/p>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>&lt;p>&lt;/section>
</span><span class='line'>cp source/&lt;em>includes/custom/asides/about.html source/&lt;/em>includes/asides/about.html #把文件考入asides的文件夹
</span><span class='line'>rake new_page["About us"]
</span><span class='line'>vi source/&lt;em>includes/custom/navigation.html #添加以下内容
</span><span class='line'>&lt;li>&lt;a href="/about-us">About&lt;/a>&lt;/li>
</span><span class='line'>vi &lt;/em>config.yml #修改_config.yml在default asides中加入如下&lt;code>asides/about.html&lt;/code></span></code></pre></td></tr></table></div></figure></notextile></div>至此博客sidebar上就多了about us的介绍，同时结尾处提供了一个链接，可以转到navibar上about的页面，方便做更详细的介绍。</p>

<h4>disqus评论导入</h4>

<p>从04年开始写的博客看得人虽然不多，评论几年下来几百条也是有的。换到octopress来，能保留还是要尽量保留。但是太多的情况是，网上遍地的disqus导入都涉及到地址变换，这个对我挑战过大。有次上网时，看到<a href="http://twitter.com/laoyang945">@laoyang945</a>提出的方法很靠谱。首先保证wordpress上的博客文章可以导出到disqus上，这个没问题的，有插件的。然后在disqus登录后，在tools中选中<code>Migrate Threads</code>的<code>Upload a URL map</code>,我们会得到一个csv文件，第一个单元格是登记于disqus的地址，我们在第二单元格填入想要链接的博客地址就可以了。这样做的好处是，以后再次迁移的时候，评论可以很容易的管理，缺点是得一条一条地整理。</p>

<h4>wordpress导入</h4>

<p>对wordpress导入我是最无语的。我曾经导出成功过，可是之后要再次实行的时候，却失败了。目前对我无解，不过我个人推荐这个<a href="https://github.com/thomasf/exitwp">exitwp</a>，大伙应该可以导出的吧。要注意看下面<code>getting started</code>的提示，如果提示dependancy有问题的话，根据提示去安装，要么用<code>python</code>安装，要么直接将py后缀的文件放到文件夹内。</p>

<h4>tag_cloud</h4>

<p>很遗憾，这个目前对我无解，我尝试了如下方法：</p>

<ul>
<li><p><a href="http://aijazansari.com/2012/01/07/tag-clouds-with-octopress/">Tag Clouds With Octopress</a></p></li>
<li><p><a href="https://github.com/imathis/octopress/pull/282">Tag Cloud Git</a></p></li>
</ul>


<h4>favicon</h4>

<p>网站的小图标也是可以留意的，有的人说只有这个也ok了，网站才算叫just right. favicon的更新方法很简单，将你中意的<code>favicon.png</code>这个文件考入<code>source</code>文件夹，在rake更新即可。</p>

<h4>关于octopress的备份</h4>

<p>我对git的了解基本属于残疾人，连入门都不算。作为一个从windows95就开始折腾的中国网民来说，装机和备份是生存手段。这里我介绍一个octopress的备份。我们知道，博客就两项内容，一个是内容，一个是格式。内容根本没有任何问题都是markdown格式的，稍微拷下就ok了。格式咋办了，写到这里都快崩溃了，再做一次肯定不干，直接来个tar吧。用下面的命令备份到目前为止的文件夹吧，以后恢复时要做的是装好octopress后，用这个覆盖就可以了，没试过，我觉得ok就是了。<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tar -zcvf blogbak.tar.gz /home/wwwroot/blog #这是压缩命令
</span><span class='line'>tar -zxvf blogbak.tar.gz #这是解压命令</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>自动完成文件名的小技巧</h4>

<p>这个很多人应该都知道，我到这个礼拜才从同事那儿学会，就是在敲入文件地址的时候，当输入的头几个字母已经足以将该文件和其他文件区分开来时，按<code>tab</code>键会自动补齐。这同样适用于文件夹名字的输入。</p>

<h4>TextExpander的使用</h4>

<p>Octopress虽然号称是黑客博客工具，但是有时候用图形化界面来整理感觉也很不错。这里从网上借鉴<a href="http://angelostavrow.com/blog/2011/12/11/quickie-textexpander-and-octopress/">Quickie: TextExpander and Octopress</a>，(这下看出我标题上图案是从哪抄来的吧，-_-!!)得出如下心得。<a href="http://www.smilesoftware.com/TextExpander/">TextExpander</a>的作用是任何在mac上的键幅输入都会被跟踪，当跟踪到数据和预设的一致时，代入对应字符串。比如我输入预设的<code>sshi</code>时，mac上就会自动变成<code>ssh root@x.x.x.x</code>。提几个看法。</p>

<ul>
<li>可以设<code>rknp</code>为<code>cd ~/blog; rake new_post["%fill:title%"]; vi ./source/_posts/%Y-%m-%d-*.markdown</code>。</li>
<li>可以设<code>rkgr</code>为<code>cd ~/blog; rake generate; rake deploy</code></li>
<li>其实发挥想象力的话，你可以在vps服务器上设立dropbox文件夹，把预设<code>public</code>置入同步文件夹内，我们在本地上用Mou或Byword书写，本地Dropbox存盘，本地rake generate。然后那儿就直接被更新了。这个只是想法，还没有被测试过，以后来整。</li>
</ul>


<h4>给网站添加访问分析 Google Analytics</h4>

<p>我在看了这个<a href="http://www.whatwherewhy.me/colophon/">网页</a>后，发现我还可以添加网站分析，毕竟是自己努力出来的东西，看看大伙是否有兴趣访问还是不错的，不过很多情况是远逊于预期。:)</p>

<ol>
<li>先于<a href="https://www.google.com/analytics">Google Analytics</a>开通和自己网站相关的服务，比如登记自己的网址，取得GA的Track ID，应该如该样式<code>UA-28584XXX-X</code>.</li>
<li>修改<code>_config.yml</code>最后部分，将ID置于<code>google_analytics_tracking_id:</code>项目之后，rake一下就行了。</li>
<li>之后进入GA网站看report吧，你就会知道何时多少人访问过你的网站。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress博客从零开始 II]]></title>
    <link href="http://colors4.us/blog/2012/01/08/octopressbo-ke-cong-ling-kai-shi-ii/"/>
    <updated>2012-01-08T08:13:00-05:00</updated>
    <id>http://colors4.us/blog/2012/01/08/octopressbo-ke-cong-ling-kai-shi-ii</id>
    <content type="html"><![CDATA[<p>现在开始进行下一步<strong>octopress的安装</strong>。</p>

<p>我之前做过的octopress博客是这样更新的，vps上安装了，本地电脑也安装了，两个同时和github同步保持更新。同时，域名绑定vps的ip地址，用nginx来显现网页。因为我对git不熟悉，经常会出现一个问题就是更新出现问题。<!--more--></p>

<p>octopress要求有rvm和git等配置好，我直接列出在<strong>ubuntu</strong>下直接安装的命令行，下次我考好直接贴入就可以了。
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apt-get install git git-core git-gui git-doc curl gcc build-essential
</span><span class='line'>groupadd rvm
</span><span class='line'>useradd -g rvm rvm
</span><span class='line'>usermod -a -G rvm root
</span><span class='line'>bash &lt; &lt;(curl -Lk https://github.com/wayneeseguin/rvm/raw/1.3.0/contrib/install-system-wide)
</span><span class='line'>echo '[[ -s "/usr/local/rvm/scripts/rvm" ]] &amp;&amp; . "/usr/local/rvm/scripts/rvm"' >> ~/.bash_profile
</span><span class='line'>source ~/.bash_profile
</span><span class='line'>rvm pkg install zlib
</span><span class='line'>rvm pkg install openssl
</span><span class='line'>rvm install 1.9.2 -C --with-openssl-dir=$HOME/.rvm/usr
</span><span class='line'>rvm --default use 1.9.2
</span><span class='line'>apt-get install libcurl4-openssl-dev libssl-dev zlib1g-dev libreadline5-dev
</span><span class='line'>ruby -v</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>这时我们需要在github网页上配置一个新的源，猛击<a href="https://github.com/repositories/new">这里</a>开启新源。
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>VPS </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd ~;mkdir .ssh;cd .ssh #vps上制作ssh登录key
</span><span class='line'>ssh-keygen -t rsa -C "your@email.com"
</span><span class='line'>vi id_rsa.pub #考入github public key中
</span><span class='line'>ssh -T git@github.com #测试是否可以登录,注意将原先已有的authokey2文件保存后再拷回来，保证本机登录vps的无密码要求功能
</span><span class='line'>git config --global user.name "your name"
</span><span class='line'>git config --global user.email your@email.com</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>继续octopress的配置
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir /home/wwwroot;cd /home/wwwroot
</span><span class='line'>git clone git://github.com/imathis/octopress.git blog;cd blog #我的博客安装在/home/wwwroot文件夹下，如果直接安装到root下，nginx是无法正常显示的。
</span><span class='line'>ln /home/wwwroot/blog ~/blog -s #在根目录建立一个快捷方式
</span><span class='line'>gem install bundle
</span><span class='line'>rake setup_github_pages #将刚才新设好的github page地址考入git@github.com:yourname/blog.git
</span><span class='line'>git remote add origin git@github.com:yourname/blog.git
</span><span class='line'>rake install
</span><span class='line'>rake generate
</span><span class='line'>rake deploy
</span><span class='line'>git add .
</span><span class='line'>git commit -m "blahblahblah"
</span><span class='line'>git push origin master</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>以上做完后你的博客就已经设置好了。关于git有些补充：</p>

<ul>
<li><p>用<code>git remote －v</code>来看看push的设置，刚开始初始化完的时候，你只有一个无法远程push的git源，也就是octopuses作者的git源<code>git://github.com/imathis/octopress.git</code>，我们需要通过这条命令更新为自己的git源<code>git remote add origin git@github.com:linpengxuan/test.git</code>,这里origin只是一个名词，一个代号，很遗憾我花了n长时间才发现这个<code>origin</code>是可以改成自己想要的任何名字，比如<code>mown</code>，这样的结果是，我们在和网站同步的时候就变成了<code>git push myown master</code>;同样的，<code>master</code>也是本地机子的源的名字，所以命令的意思就是<strong>push to myown from master</strong>。类似的<code>git pull origin source</code>意思为<strong>pull from origin to source</strong>。</p></li>
<li><p><code>git add .</code>的意义在于给每个文件创建个时间点，在这个时点给文件命名为后面的commit的内容<code>blahblah</code>。当我们修改了文件以后，另一个时点再commit一个不同的内容<code>blah II</code>。这样的意义就是你可以取回不同时点内容变动前后的相同文件，这也就是github很有意义的地方，版本控制。这也是我整了很久才明白过来的地方。</p></li>
</ul>


<p>因为我需要把博客放在自己的网站上，我打算先安装nginx到vps上，我的网站内容。之前装过<a href="http://lnmp.org/">LMNP一键安装包</a>，实在太吃我内存了，256mb的xen vps用<code>free</code>一看，就只有几兆的空余，所以最好的方法就是只装一个LMNP中的那个N，也就是nginx。
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>echo "deb http://nginx.org/packages/ubuntu/ lucid nginx" >> /etc/apt/sources.list
</span><span class='line'>echo "deb-src http://nginx.org/packages/ubuntu/ lucid nginx" >> /etc/apt/sources.list
</span><span class='line'>apt-get update
</span><span class='line'>apt-get install nginx
</span><span class='line'>service nginx start</span></code></pre></td></tr></table></div></figure></notextile></div>
然后调整nginx内容，指向博客首页。
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vi /etc/nginx/conf.d/default.conf #在server框内插入以下内容
</span><span class='line'>server_name  xxx.com; #网站的域名
</span><span class='line'>location / {root   /home/wwwroot/blog/public;&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>               index  index.html;}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>service nginx restart #回到目录下进行重启nginx服务</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>回到目录下，再调整<code>_config.yml</code>。
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd ~/blog
</span><span class='line'>vi _config.yml #这里需要改以下两个地方,destination不改的话，你的网站就没有theme了
</span><span class='line'>root: /
</span><span class='line'>destination: public/
</span><span class='line'>rake generate;rake deploy #要备份的话，可以commit到origin，一般网站更新到这步就可以了</span></code></pre></td></tr></table></div></figure></notextile></div>
这时候打开你的vps ip地址，应该就可以看到octopress博客了。</p>

<h4>关于博客域名绑定</h4>

<ul>
<li>我先将域名绑定至网络免费的dns服务提供商，我用的是<a href="http://freedns.ws">freedns.ws</a>,在上面将域名指向vps ip地址。</li>
<li>因为域名是在webhost上买的，所以webhost有个可以更改nameserver的地方，将这个指向freedns服务商提供的nameserver就可以了。</li>
<li>然后等待1～24小时让这个更改内容在网络进行propogate。</li>
</ul>


<p>到这儿，octopress博客已经完全搭建起来了。直接就可以用如下命令来进行博客的发布。呼，长嘘口气。
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake new_post["filename"]
</span><span class='line'>vi source/_posts/2012-01-07-filename.markdown #起名方式为日期，然后跟着post名称，如果是中文的话，会自动被整理成拼音,记得在开篇设置author: name以及category: 类别等
</span><span class='line'>rake generate
</span><span class='line'>rake deploy</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
</feed>
